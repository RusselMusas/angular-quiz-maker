{"version":3,"file":"src_app_quiz-questions_quiz-questions_module_ts.786975c21217444d.js","mappings":"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","sources":["./src/app/quiz-questions/quiz-questions.component.ts","./src/app/quiz-questions/quiz-questions.component.html","./src/app/quiz-questions/quiz-questions.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NavigationExtras, Router } from '@angular/router';\nimport { Category } from 'src/app/core/models/category.model';\nimport { QuizQuestion, Result } from 'src/app/core/models/quiz-question.model';\nimport { QuizService } from 'src/app/core/services/quiz.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-quiz-questions',\n  templateUrl: './quiz-questions.component.html',\n  styleUrls: ['./quiz-questions.component.css']\n})\nexport class QuizQuestionsComponent implements OnInit {\n\n  difficulties: string[] = [\"Easy\", \"Medium\", \"Hard\"];\n  categories: Category | undefined;\n  questions: QuizQuestion | undefined;\n  question1: Result | undefined;\n  question2: Result | undefined;\n  question3: Result | undefined;\n  question4: Result | undefined;\n  question5: Result | undefined;\n  quizAmount: number = 5;\n  quizType: string = \"multiple\";\n  formCreateQuiz = new FormGroup({\n    categorySelect: new FormControl('', Validators.required),\n    difficultySelect: new FormControl('', Validators.required)\n  });\n  formSubmitQuiz = new FormGroup({\n    inputResponse1: new FormControl('', Validators.required),\n    inputResponse2: new FormControl('', Validators.required),\n    inputResponse3: new FormControl('', Validators.required),\n    inputResponse4: new FormControl('', Validators.required),\n    inputResponse5: new FormControl('', Validators.required)\n  });\n  isSubmitted01: boolean = false;\n\n  constructor(private quizService: QuizService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.getCategories();\n  }\n\n  getCategories() {\n    this.quizService.getCategories()\n      .subscribe({\n        next: response => {\n          this.categories = response\n        },\n        error: error => {\n          console.log(\"Error occurred: \", error)\n        },\n        complete: () => {\n          console.log(\"getCategories completed.\")\n        }\n      });\n  }\n\n  createQuiz() {\n    // console.log(this.formCreateQuiz.value);\n    this.isSubmitted01 = true;\n    this.resetChoices();\n    let catId: number = this.formCreateQuiz.value.categorySelect ? parseInt(this.formCreateQuiz.value.categorySelect) : 0;\n    let difficulty: string = this.formCreateQuiz.value.difficultySelect ? this.formCreateQuiz.value.difficultySelect.toLowerCase() : \"\";\n    this.quizService.getQuizQuestions(this.quizAmount, catId, difficulty, this.quizType)\n      .subscribe({\n        next: response => {\n          response = this.setAllAnswers(response);\n          console.log(\"QuizQuestions response: \", response);\n          this.questions = response;\n          this.question1 = this.questions.results[0];\n          this.question2 = this.questions.results[1];\n          this.question3 = this.questions.results[2];\n          this.question4 = this.questions.results[3];\n          this.question5 = this.questions.results[4];\n          this.isSubmitted01 = false;\n        },\n        error: error => {\n          console.log(\"Error occurred: \", error)\n        },\n        complete: () => {\n          console.log(\"getQuizQuestions completed.\")\n        }\n      });\n  }\n\n  setAllAnswers(quizQuestions: QuizQuestion) {\n    quizQuestions.results.forEach(function (arrayItem) {\n      arrayItem.all_answers = [...arrayItem.incorrect_answers];\n      arrayItem.all_answers.push(arrayItem.correct_answer);\n      arrayItem.all_answers = [...arrayItem.all_answers.sort(() => Math.random() - 0.5)];\n    });\n\n    return quizQuestions;\n  }\n\n  resetChoices() {\n    this.questions = undefined;\n    this.question1 = undefined;\n    this.question2 = undefined;\n    this.question3 = undefined;\n    this.question4 = undefined;\n    this.question5 = undefined;\n  }\n\n  submitQuiz() {\n    // console.log(\"Quiz response: \", this.formSubmitQuiz.value);\n    const navigationExtras: NavigationExtras = {\n      state: { dataR: this.formSubmitQuiz.value, dataQ: this.questions },\n    };\n    this.router.navigate(['/results'], navigationExtras);\n  }\n\n}\n","<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-8 mx-auto pt-2\">\n            <h1 class=\"text-center text-uppercase mb-4 mt-2 font-weight-bold\">Quiz Maker</h1>\n            <form class=\"form-inline row\" [formGroup]=\"formCreateQuiz\" (ngSubmit)=\"createQuiz()\">\n                <div class=\"form-group mb-2 col-5\">\n                    <label for=\"categorySelect\" class=\"sr-only\">Category</label>\n                    <select id=\"categorySelect\" formControlName=\"categorySelect\"\n                        class=\"form-control form-control-sm w-100\">\n                        <option value=\"\" selected>Select a category</option>\n                        <option *ngFor=\"let item of categories?.trivia_categories\" [value]=\"item.id\">\n                            {{ item.name }}\n                        </option>\n                    </select>\n                </div>\n                <div class=\"form-group mb-2 col-5\">\n                    <label for=\"difficultySelect\" class=\"sr-only\">Difficulty</label>\n                    <select id=\"difficultySelect\" formControlName=\"difficultySelect\"\n                        class=\"form-control form-control-sm w-100\">\n                        <option value=\"\" selected>Select difficulty</option>\n                        <option *ngFor=\"let item of difficulties\" [value]=\"item\">\n                            {{ item }}\n                        </option>\n                    </select>\n                </div>\n                <div class=\"form-group mb-2 col-2 justify-content-end\">\n                    <button type=\"submit\" class=\"btn btn-light border-secondary btn-sm w-100\" id=\"createBtn\"\n                        [disabled]=\"formCreateQuiz.invalid || isSubmitted01\">Create</button>\n                </div>\n                <div [hidden]=\"!isSubmitted01\" class=\"spinner-border text-secondary ml-2\" role=\"status\">\n                    <span class=\"sr-only\">Processing...</span>\n                </div>\n            </form>\n            <form class=\"form-inline row px-4\" [formGroup]=\"formSubmitQuiz\" (ngSubmit)=\"submitQuiz()\">\n                <div class=\"form-group mb-4 col-12\">\n                    <div class=\"form-group question\">\n                        <p class=\"text-small\">{{ question1?.question | decodeHtml }}</p>\n                    </div>\n                    <div class=\"form-group radios\">\n                        <ng-container *ngFor=\"let element of question1?.all_answers; let j = index\">\n                            <input type=\"radio\" name=\"inputResponse1\" formControlName=\"inputResponse1\" [value]=\"element\"\n                                [id]=\"'q1' + j\" />\n                            <label class=\"radio btn btn-sm\" [for]=\"'q1' + j\">{{ element | decodeHtml }}</label>\n                        </ng-container>\n                    </div>\n                </div>\n                <div class=\"form-group mb-2 col-12\">\n                    <div class=\"form-group question\">\n                        <p class=\"text-small\">{{ question2?.question | decodeHtml }}</p>\n                    </div>\n                    <div class=\"form-group radios\">\n                        <ng-container *ngFor=\"let element of question2?.all_answers; let j = index\">\n                            <input type=\"radio\" name=\"inputResponse2\" formControlName=\"inputResponse2\" [value]=\"element\"\n                                [id]=\"'q2' + j\" />\n                            <label class=\"radio btn btn-sm\" [for]=\"'q2' + j\">{{ element | decodeHtml }}</label>\n                        </ng-container>\n                    </div>\n                </div>\n                <div class=\"form-group mb-2 col-12\">\n                    <div class=\"form-group question\">\n                        <p class=\"text-small\">{{ question3?.question | decodeHtml }}</p>\n                    </div>\n                    <div class=\"form-group radios\">\n                        <ng-container *ngFor=\"let element of question3?.all_answers; let j = index\">\n                            <input type=\"radio\" name=\"inputResponse3\" formControlName=\"inputResponse3\" [value]=\"element\"\n                                [id]=\"'q3' + j\" />\n                            <label class=\"radio btn btn-sm\" [for]=\"'q3' + j\">{{ element | decodeHtml }}</label>\n                        </ng-container>\n                    </div>\n                </div>\n                <div class=\"form-group mb-2 col-12\">\n                    <div class=\"form-group question\">\n                        <p class=\"text-small\">{{ question4?.question | decodeHtml }}</p>\n                    </div>\n                    <div class=\"form-group radios\">\n                        <ng-container *ngFor=\"let element of question4?.all_answers; let j = index\">\n                            <input type=\"radio\" name=\"inputResponse4\" formControlName=\"inputResponse4\" [value]=\"element\"\n                                [id]=\"'q4' + j\" />\n                            <label class=\"radio btn btn-sm\" [for]=\"'q4' + j\">{{ element | decodeHtml }}</label>\n                        </ng-container>\n                    </div>\n                </div>\n                <div class=\"form-group mb-2 col-12\">\n                    <div class=\"form-group question\">\n                        <p class=\"text-small\">{{ question5?.question | decodeHtml }}</p>\n                    </div>\n                    <div class=\"form-group radios\">\n                        <ng-container *ngFor=\"let element of question5?.all_answers; let j = index\">\n                            <input type=\"radio\" name=\"inputResponse5\" formControlName=\"inputResponse5\" [value]=\"element\"\n                                [id]=\"'q5' + j\" />\n                            <label class=\"radio btn btn-sm\" [for]=\"'q5' + j\">{{ element | decodeHtml }}</label>\n                        </ng-container>\n                    </div>\n                </div>\n                <p class=\"d-none\">{{ formSubmitQuiz.value | json }}</p>\n                <div class=\"form-group button mb-2 mt-4 col-12 justify-content-center\">\n                    <button name=\"submitBtn\" class=\"btn btn-sm w-75 btn-secondary\"\n                        [hidden]=\"formSubmitQuiz.invalid || !questions\">submit</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { QuizQuestionsComponent } from './quiz-questions.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ QuizQuestionsComponent ],\r\n  imports: [\r\n    RouterModule.forChild([\r\n      { path: '', component: QuizQuestionsComponent }\r\n    ]),\r\n    SharedModule\r\n  ],\r\n  exports: [],\r\n  providers: [ ]\r\n})\r\nexport class QuizQuestionsModule { }\r\n"],"names":["FormGroup","FormControl","Validators","i0","QuizQuestionsComponent","constructor","quizService","router","categorySelect","required","difficultySelect","inputResponse1","inputResponse2","inputResponse3","inputResponse4","inputResponse5","ngOnInit","getCategories","subscribe","next","response","categories","error","console","log","complete","createQuiz","isSubmitted01","resetChoices","catId","formCreateQuiz","value","parseInt","difficulty","toLowerCase","getQuizQuestions","quizAmount","quizType","setAllAnswers","questions","question1","results","question2","question3","question4","question5","quizQuestions","forEach","arrayItem","all_answers","incorrect_answers","push","correct_answer","sort","Math","random","undefined","submitQuiz","navigationExtras","state","dataR","formSubmitQuiz","dataQ","navigate","selectors","decls","vars","consts","template","ctx","RouterModule","SharedModule","QuizQuestionsModule","forChild","path","component","declarations","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}